// <auto-generated />
namespace Tchernobyl
{
    using System.Globalization;
    using System.Reflection;
    using System.Resources;

    internal static class Resources
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("Tchernobyl.Resources", typeof(Resources).GetTypeInfo().Assembly);

        /// <summary>
        /// Tuple&lt;string, string, IEnumerable&lt;IFilter&gt;, Delegate&gt; is currently the only type supported. Make sure your 'yield return' calls only return Tuple&lt;string, string, IEnumerable&lt;IFilter&gt;, Delegate&gt; elements.
        /// </summary>
        internal static string Convention_ElementTypeUnsupported
        {
            get { return GetString("Convention_ElementTypeUnsupported"); }
        }

        /// <summary>
        /// Tuple&lt;string, string, IEnumerable&lt;IFilter&gt;, Delegate&gt; is currently the only type supported. Make sure your 'yield return' calls only return Tuple&lt;string, string, IEnumerable&lt;IFilter&gt;, Delegate&gt; elements.
        /// </summary>
        internal static string FormatConvention_ElementTypeUnsupported()
        {
            return GetString("Convention_ElementTypeUnsupported");
        }

        /// <summary>
        /// Optimized anonymous methods are not currently supported due to the way the C# compiler changes the underlying method signature. You can prevent this optimization from being applied by referencing a local variable, field, property or method in the delegate (e.g Route.Get(""/products/{id}"", (long productID) =&gt; { return Content(productID.ToString()); }) or Route.Get(""/products/{id}"", (long productID) =&gt; { var principal = User; return productID.ToString(); })).
        /// </summary>
        internal static string Convention_OptimizedAnonymousMethodUnsupported
        {
            get { return GetString("Convention_OptimizedAnonymousMethodUnsupported"); }
        }

        /// <summary>
        /// Optimized anonymous methods are not currently supported due to the way the C# compiler changes the underlying method signature. You can prevent this optimization from being applied by referencing a local variable, field, property or method in the delegate (e.g Route.Get(""/products/{id}"", (long productID) =&gt; { return Content(productID.ToString()); }) or Route.Get(""/products/{id}"", (long productID) =&gt; { var principal = User; return productID.ToString(); })).
        /// </summary>
        internal static string FormatConvention_OptimizedAnonymousMethodUnsupported(object id)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("Convention_OptimizedAnonymousMethodUnsupported", "id"), id);
        }

        /// <summary>
        /// An invalid service provider locator has been provided. Ensure that a non-null service provider is returned.
        /// </summary>
        internal static string Extensions_ServiceProviderLocatorInvalid
        {
            get { return GetString("Extensions_ServiceProviderLocatorInvalid"); }
        }

        /// <summary>
        /// An invalid service provider locator has been provided. Ensure that a non-null service provider is returned.
        /// </summary>
        internal static string FormatExtensions_ServiceProviderLocatorInvalid()
        {
            return GetString("Extensions_ServiceProviderLocatorInvalid");
        }

        private static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name);

            System.Diagnostics.Debug.Assert(value != null);

            if (formatterNames != null)
            {
                for (var i = 0; i < formatterNames.Length; i++)
                {
                    value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
                }
            }

            return value;
        }
    }
}
